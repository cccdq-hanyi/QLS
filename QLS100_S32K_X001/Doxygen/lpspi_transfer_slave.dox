/*!
    @page lpspi_transfer_slave_s32k116_group LPSPI Transfer Slave
    @brief Driver example that will show the LPSPI Slave functionalities

    ## Application description ##
    ______
    The purpose of this application is to show the user how to use the Low Power Serial Peripheral Interface on the S32K116 using the S32 SDK API.

    - The application uses the on board instance of LPSPI in slave configuration to communicate data via the SPI bus.\n
        The example sends a buffer of 16 elements as a slave to the master of the SPI Bus.

    - To check if the transmission is successful the user has to verify that the masterDataSend buffer has the same elements as slaveDataReceive buffer and slaveDataSend buffer has the same elements as masterDataReceive buffer after running the example.

    @note The Slave device should be listening for data coming from the Master before the Master device starts sending the data.

    ## Prerequisites ##
    ______
    The run the example you will need to have the following items:
    - 1 S32K116 board
    - 1 Power Adapter 12V (if the board cannot be powered from the USB port)
    - 4 Dupont male to male cables
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K116EVB-Q048

    ## Hardware Wiring ##
    ______
    The following connections must be done to for this example application to work:

    PIN FUNCTION            | S32K116EVB-Q100
    ------------------------|--------------------
    LPSPI0 CS   (\b PTB5)   | J2.3 - Master CS
    LPSPI0 SCK  (\b PTB2)   | J2.6 - Master SCK
    LPSPI0 MOSI (\b PTB4)   | J2.4 - Master MISO
    LPSPI0 MISO (\b PTB3)   | J2.5 - Master MOSI

    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b lpspi_transfer_slave_s32k116. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b lpspi_transfer_slave_s32k116). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be two debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b lpspi_transfer_slave_s32k116_debug_flash_jlink    | Debug the FLASH configuration using Segger Jlink debuggers
     \b lpspi_transfer_slave_s32k116_debug_flash_pemicro  | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.


*/

